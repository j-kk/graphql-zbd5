// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type NewPosition struct {
	Width  float64 `json:"width"`
	Heigth float64 `json:"heigth"`
}

type NewUser struct {
	Gender    *string      `json:"gender"`
	BirthYear *int         `json:"birth_year"`
	Income    *int         `json:"income"`
	GeoPos    *NewPosition `json:"geo_pos"`
	Interests []string     `json:"interests"`
}

type Position struct {
	Width  float64 `json:"width"`
	Heigth float64 `json:"heigth"`
}

type User struct {
	ID        string    `json:"id"`
	Gender    *Gender   `json:"gender"`
	BirthYear *int      `json:"birth_year"`
	Income    *int      `json:"income"`
	GeoPos    *Position `json:"geo_pos"`
	Interests []string  `json:"interests"`
}

type Gender string

const (
	GenderM     Gender = "M"
	GenderF     Gender = "F"
	GenderOther Gender = "OTHER"
)

var AllGender = []Gender{
	GenderM,
	GenderF,
	GenderOther,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderM, GenderF, GenderOther:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
